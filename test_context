import pandas as pd

# Example DataFrame structure:
# Columns: ['country', 'GDP', 'population', 'unemployment_rate', 'urbanization_rate', 
#           'furniture_revenue', 'diy_revenue', 'home_care_revenue']

# Load and preprocess your data
data = pd.read_csv('your_data.csv')

# Features (X): socio-economic variables
X_all = data[['GDP', 'population', 'unemployment_rate', 'urbanization_rate']]

# Labels (y): revenues for 3 markets in the 30 known countries
y = data[['furniture_revenue', 'diy_revenue', 'home_care_revenue']]

# architecture:

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_all, y, test_size=0.3, random_state=42)

# Scale data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Build the model
model = Sequential()
model.add(Dense(128, input_dim=X_train_scaled.shape[1], activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(y_train.shape[1], activation='linear'))  # Multi-output regression for 3 markets

# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])

# Train the model
model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, validation_split=0.2)

# Evaluate the model
loss, mae = model.evaluate(X_test_scaled, y_test)
print(f"Mean Absolute Error: {mae}")


# Assume `X_all` is the DataFrame containing features for all 150 countries
X_all_scaled = scaler.transform(X_all)
predicted_revenues = model.predict(X_all_scaled)

# `predicted_revenues` will contain the estimated revenues for all three markets across all 150 countries


# Example DataFrame structure:
# Columns: ['GDP', 'population', 'unemployment_rate', 'urbanization_rate']

# Load your original data if needed
data = pd.read_csv('your_data.csv')

# Assume `X_all` is the DataFrame containing features for all 150 countries
# and `predicted_revenues` is the array containing predicted revenues for all three markets

# Create a new DataFrame to store the predicted revenues along with the original features
predicted_data = pd.DataFrame(X_all, columns=['GDP', 'population', 'unemployment_rate', 'urbanization_rate'])

# Add predicted revenues to the DataFrame
predicted_data['predicted_furniture_revenue'] = predicted_revenues[:, 0]  # Assuming column order matches predicted_revenues
predicted_data['predicted_diy_revenue'] = predicted_revenues[:, 1]
predicted_data['predicted_home_care_revenue'] = predicted_revenues[:, 2]

# Save the predicted data to a new CSV file
predicted_data.to_csv('predicted_revenues.csv', index=False)


