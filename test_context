from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasRegressor

# Function to build the model
def build_model(input_dim, neurons_1=128, neurons_2=64):
    model = Sequential()
    model.add(Dense(neurons_1, input_dim=input_dim, activation='relu'))
    model.add(Dense(neurons_2, activation='relu'))
    model.add(Dense(3, activation='linear'))  # Multi-output regression (for 3 markets)
    
    model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])
    return model

# Function to train and optimize the model with GridSearchCV
def train_model_with_grid_search(X, y):
    # Split the data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # Scale the data
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    # Wrap the Keras model for GridSearchCV
    model = KerasRegressor(build_fn=build_model, input_dim=X_train_scaled.shape[1], epochs=100, batch_size=32, verbose=0)
    
    # Hyperparameter grid to tune
    param_grid = {
        'neurons_1': [64, 128, 256],
        'neurons_2': [32, 64, 128],
        'batch_size': [16, 32, 64],
        'epochs': [50, 100, 150]
    }
    
    # GridSearchCV for hyperparameter optimization
    grid = GridSearchCV(estimator=model, param_grid=param_grid, cv=3)
    
    # Train the model
    grid_result = grid.fit(X_train_scaled, y_train)
    
    # Get the best model and hyperparameters
    best_model = grid_result.best_estimator_
    best_params = grid_result.best_params_
    
    print(f"Best Hyperparameters: {best_params}")
    
    # Evaluate the model on the test set
    loss, mae = best_model.model.evaluate(X_test_scaled, y_test)
    print(f"Test Loss: {loss}, Test MAE: {mae}")
    
    return best_model, best_params
